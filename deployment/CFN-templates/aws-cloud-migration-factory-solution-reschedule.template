AWSTemplateFormatVersion: '2010-09-09'
Description: "(%%SOLUTION_ID%%-automation) - The AWS CloudFormation template for deployment of the AWS Cloud Migration Factory Solution. Version:%%VERSION%%"

Parameters:
  # General parameters
  Environment:
    Type: String
    Default: test
    Description: Environment name
    AllowedValues:
      - test
      - dev
      - prod
  
  SolutionPrefix:
    Type: String
    Default: migration-factory
    Description: Prefix for resources created by this solution
  
  # Parent stack references
  UserPoolId:
    Type: String
    Description: Cognito User Pool ID from parent stack
  
  UserPoolClientId:
    Type: String
    Description: Cognito User Pool Client ID from parent stack
  
  ApiGatewayId:
    Type: String
    Description: API Gateway ID from parent stack
  
  ApiGatewayRootResourceId:
    Type: String
    Description: API Gateway Root Resource ID from parent stack
  
  LambdaRoleArn:
    Type: String
    Description: Base Lambda execution role ARN from parent stack
  
  LogRetention:
    Type: Number
    Default: 30
    Description: CloudWatch Logs retention period in days

Resources:
  #############################################################
  # DynamoDB Table for Reschedule Requests
  #############################################################
  RescheduleRequestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${SolutionPrefix}-${Environment}-reschedule-requests"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: request_id
          AttributeType: S
        - AttributeName: app_id
          AttributeType: S
      KeySchema:
        - AttributeName: request_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: AppIdIndex
          KeySchema:
            - AttributeName: app_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Solution
          Value: !Ref SolutionPrefix
        - Key: Environment
          Value: !Ref Environment
        - Key: Feature
          Value: RescheduleRequests

  #############################################################
  # Lambda Function for Reschedule Requests API
  #############################################################
  RescheduleRequestsLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${SolutionPrefix}-${Environment}-get-reschedule-requests"
      Handler: index.lambda_handler
      Role: !GetAtt RescheduleRequestsLambdaRole.Arn
      Runtime: python3.11
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref RescheduleRequestsTable
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          from boto3.dynamodb.conditions import Key
          
          # Initialize DynamoDB client
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['TABLE_NAME'])
          
          def lambda_handler(event, context):
              try:
                  # Get path parameters
                  path_parameters = event.get('pathParameters', {}) or {}
                  app_id = path_parameters.get('app_id')
                  
                  # If app_id is provided, get requests for that app
                  if app_id:
                      response = table.query(
                          IndexName='AppIdIndex',
                          KeyConditionExpression=Key('app_id').eq(app_id)
                      )
                      items = response.get('Items', [])
                  # Otherwise, get all requests
                  else:
                      response = table.scan()
                      items = response.get('Items', [])
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*',
                          'Access-Control-Allow-Headers': 'Content-Type,Authorization',
                          'Access-Control-Allow-Methods': 'GET,OPTIONS'
                      },
                      'body': json.dumps(items)
                  }
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({'error': str(e)})
                  }
      Tags:
        - Key: Solution
          Value: !Ref SolutionPrefix
        - Key: Environment
          Value: !Ref Environment
        - Key: Feature
          Value: RescheduleRequests

  # CloudWatch Logs for Lambda
  RescheduleRequestsLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${RescheduleRequestsLambdaFunction}"
      RetentionInDays: !Ref LogRetention

  # IAM Role for Lambda
  RescheduleRequestsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !GetAtt RescheduleRequestsTable.Arn
                  - !Sub "${RescheduleRequestsTable.Arn}/index/*"
      Tags:
        - Key: Solution
          Value: !Ref SolutionPrefix
        - Key: Environment
          Value: !Ref Environment

  #############################################################
  # API Gateway Resources
  #############################################################
  RescheduleRequestsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayId
      ParentId: !Ref ApiGatewayRootResourceId
      PathPart: 'reschedule-requests'

  RescheduleRequestsAppIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayId
      ParentId: !Ref RescheduleRequestsResource
      PathPart: '{app_id}'

  # GET /reschedule-requests
  RescheduleRequestsGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayId
      ResourceId: !Ref RescheduleRequestsResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayCognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RescheduleRequestsLambdaFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # GET /reschedule-requests/{app_id}
  RescheduleRequestsAppIdGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayId
      ResourceId: !Ref RescheduleRequestsAppIdResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayCognitoAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RescheduleRequestsLambdaFunction.Arn}/invocations"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # OPTIONS methods for CORS
  RescheduleRequestsOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayId
      ResourceId: !Ref RescheduleRequestsResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  RescheduleRequestsAppIdOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayId
      ResourceId: !Ref RescheduleRequestsAppIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true

  # Cognito Authorizer
  ApiGatewayCognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      RestApiId: !Ref ApiGatewayId
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}"

  # Lambda Permission for API Gateway
  RescheduleRequestsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref RescheduleRequestsLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayId}/*"

Outputs:
  RescheduleRequestsTableArn:
    Description: ARN of the Reschedule Requests DynamoDB Table
    Value: !GetAtt RescheduleRequestsTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-RescheduleRequestsTableArn"

  RescheduleRequestsLambdaArn:
    Description: ARN of the Reschedule Requests Lambda Function
    Value: !GetAtt RescheduleRequestsLambdaFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-RescheduleRequestsLambdaArn"

  RescheduleRequestsApiEndpoint:
    Description: API Gateway endpoint URL for Reschedule Requests
    Value: !Sub "https://${ApiGatewayId}.execute-api.${AWS::Region}.amazonaws.com/prod/reschedule-requests"
    Export:
      Name: !Sub "${AWS::StackName}-RescheduleRequestsApiEndpoint"
